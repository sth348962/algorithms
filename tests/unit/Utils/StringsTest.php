<?php

namespace Utils;

use Traversable;

use Sth348962\Algorithms\Utils\Strings;

class StringsTest extends \Codeception\Test\Unit
{
    /**
     * @param string $ascii
     * @param string[] $expected
     * @dataProvider dataForTestUtf8GeneratorSuccess
     */
    public function testUtf8GeneratorSuccess(string $ascii, array $expected)
    {
        $actual = Strings::generatorUtf8($ascii);
        $this->assertInstanceOf(Traversable::class, $actual);
        $this->assertEquals($expected, iterator_to_array($actual));
    }

    public function dataForTestUtf8GeneratorSuccess()
    {
        return [
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            ['', []],
            // ASCII
            ['Hi!', ['H', 'i', '!']],
            // UNICODE
            ['–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!', ['–ü', '—Ä', '–∏', '–≤', '–µ', '—Ç', ',', ' ', '–º', '–∏', '—Ä', '!']],
            // –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç
            [
                // 6 –±–∞–π—Ç–æ–≤
                chr(0b11111100) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) .
                // 5 –±–∞–π—Ç–æ–≤
                chr(0b11111000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) .
                // 4 –±–∞–π—Ç–∞
                'üé∂'.
                // 3 –±–∞–π—Ç–∞
                '‚ò¢'.
                // 2 –±–∞–π—Ç–∞
                '–§'.
                // 1 –±–∞–π—Ç
                '?',
                // –†–µ–∑—É–ª—å—Ç–∞—Ç
                [
                    chr(0b11111100) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000),
                    chr(0b11111000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000),
                    'üé∂',
                    '‚ò¢',
                    '–§',
                    '?',
                ]
            ],
        ];
    }

    /**
     * @param string $ascii
     * @dataProvider dataForTestUtf8GeneratorFail
     * @expectedException \InvalidArgumentException
     */
    public function testUtf8GeneratorFail(string $ascii)
    {
        $iterator = Strings::generatorUtf8($ascii);
        iterator_to_array($iterator);
    }

    public function dataForTestUtf8GeneratorFail()
    {
        return [
            // –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
            [
                chr(0b10000000)
            ],
            // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–π—Ç–æ–≤
            [
                chr(0b11111100) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000)
            ],
            // –ù–µ–≤–µ—Ä–Ω—ã–π –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0b10xxxxxx)
            [
                chr(0b11111100) . chr(0b11000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000) . chr(0b10000000),
            ],
        ];
    }
}